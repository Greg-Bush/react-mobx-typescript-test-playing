{"version":3,"sources":["webpack:///./app/stores/mock-data.ts","webpack:///./app/containers/Root/index.tsx","webpack:///./app/constants/stores.ts","webpack:///./app/base-components/Button/index.tsx","webpack:///./app/base-components/TruncatedTextWithHTML.tsx","webpack:///./app/base-components/DataTable.tsx","webpack:///./app/components/LeftDataTable/index.tsx","webpack:///./app/base-components/Checkbox/index.tsx","webpack:///./app/components/RightDataTable/index.tsx","webpack:///./app/containers/TablesApp.tsx","webpack:///./app/index.tsx","webpack:///./app/stores/RouterStore.ts","webpack:///./app/models/AbstractTableModel.ts","webpack:///./app/models/LeftTableModel.ts","webpack:///./app/models/RightTableModel.ts","webpack:///./app/stores/TablesStore.ts","webpack:///./app/stores/createStore.ts","webpack:///./main.tsx","webpack:///./app/base-components/Button/style.css?0d4e","webpack:///./app/components/LeftDataTable/style.css?ddef","webpack:///./app/base-components/Checkbox/style.css?7604"],"names":["renderDevTool","render","className","this","props","children","STORE_TABLES","STORE_LEFT_TABLE","STORE_RIGHT_TABLE","STORE_ROUTER","onPress","disabled","style","onClick","value","max","DataTable","showPagination","data","model","items","columns","accessor","show","Header","textAlign","alignSelf","Cell","whiteSpace","getTrProps","state","rowInfo","column","row","id","selectedId","getTheadProps","count","height","pageSize","isChecked","onChange","type","checked","event","target","CheckboxCell","item","has","check","DescriptionCell","artNo","name","description","showPageSizeOptions","sortable","undefined","getItemById","width","tablesStore","left","right","display","gridTemplateRows","gridTemplateColumns","gridGap","isLastSelected","isAnySelected","selectNext","isFirstSelected","selectPrevious","throwRight","checkedCount","checkAll","uncheckAll","throwLeft","TablesApp","App","history","Router","Switch","Route","path","component","add","_items","set","delete","map","Array","from","values","size","get","removeSelected","selected","selectedIndex","selectedItem","removeChecked","removedItems","forEach","checkedItem","push","clear","DATA_ITEM","MOCK_DATA","i","LEFT_TABLE_MOCK_DATA","slice","RIGHT_TABLE_MOCK_DATA","leftTableStore","rightTableStore","routerStore","rootStore","document","getElementById","module","exports"],"mappings":"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","file":"app.135ad34ed08753312ea8.js","sourcesContent":["import IDataItem from '../IDataItem';\n\nconst DATA_ITEM = {\n  name:\n    'Процессор Intel Core i9-9900K Coffee Lake (3600MHz,LGA1151 v2, L3 16386Kb)',\n  description:\n    '8-ядерный процессор, Socket LGA1151 v2, частота3600 МГц, объем кэша L2/L3: 2048 КБ/16386 КБ,ядро Coffee Lake, техпроцесс 130, 14 нм,интегрированное графическое ядро, встроенный...'\n};\n\nconst MOCK_DATA: IDataItem[] = [];\n\nfor (let i = 1; i < 10; i++) {\n  MOCK_DATA.push({\n    id: i,\n    ...DATA_ITEM,\n    artNo: i + '9999'\n  });\n}\n\nexport default MOCK_DATA;\n\nexport const LEFT_TABLE_MOCK_DATA = MOCK_DATA.slice(0, 4);\nexport const RIGHT_TABLE_MOCK_DATA = MOCK_DATA.slice(5, 8);\n","import * as React from 'react';\n\nexport class Root extends React.Component<any, any> {\n  renderDevTool() {\n    if (process.env.NODE_ENV !== 'production') {\n      const DevTools = require('mobx-react-devtools').default;\n      return <DevTools />;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        {this.props.children}\n        {this.renderDevTool()}\n      </div>\n    );\n  }\n}\n","export const STORE_TABLES = 'STORE_TABLES';\nexport const STORE_LEFT_TABLE = 'STORE_LEFT_TABLE';\nexport const STORE_RIGHT_TABLE = 'STORE_RIGHT_TABLE';\nexport const STORE_ROUTER = 'STORE_ROUTER';\n","import React from 'react';\nimport * as style from './style.css';\n\ninterface Props {\n  onPress: () => void;\n  disabled?: boolean;\n}\n\nconst Button: React.FC<Props> = ({ onPress, children, disabled = false}) => {\n  return (\n    <button disabled={disabled} className={style.button} onClick={onPress}>\n      {\n        children\n      }\n    </button>\n  )\n}\n\nexport default Button;\n","import React from 'react';\nimport parse from 'html-react-parser';\nimport truncate from 'truncate-html';\n\ninterface Props {\n  value: string;\n  max: number;\n}\n\nconst TruncatedTextWithHTML: React.FC<Props> = ({ value, max }) => {\n  return <span>{parse(truncate(value, max))}</span>;\n};\n\nexport default TruncatedTextWithHTML;\n","import { observer } from 'mobx-react';\nimport ReactTable from 'react-table';\n\nexport default observer(ReactTable);\n","import React from 'react';\nimport 'react-table/react-table.css';\nimport { observer, inject } from 'mobx-react';\nimport TruncatedTextWithHTML from 'app/base-components/TruncatedTextWithHTML';\nimport * as style from './style.css';\nimport LeftTableModel from 'app/models/LeftTableModel';\nimport { STORE_LEFT_TABLE } from 'app/constants/stores';\nimport DataTable from 'app/base-components/DataTable';\n\ninterface IProps {\n  [STORE_LEFT_TABLE]?: LeftTableModel;\n}\nconst LeftDataTable: React.FC<IProps> = (props) => {\n  const { STORE_LEFT_TABLE: model } = props;\n  return (\n    <DataTable\n      showPagination={false}\n      data={model.items}\n      columns={[\n        {\n          accessor: 'id',\n          show: false\n        },\n        {\n          Header: 'Артикул',\n          accessor: 'artNo',\n          style: {\n            textAlign: 'center',\n            alignSelf: 'center'\n          }\n        },\n        {\n          Header: 'Наименование',\n          accessor: 'name',\n          Cell: ({ value }) => <TruncatedTextWithHTML value={value} max={41} />,\n          style: {\n            whiteSpace: 'normal'\n          }\n        }\n      ]}\n      getTrProps={(state, rowInfo, column) => {\n        const className =\n          rowInfo && rowInfo.row.id === model.selectedId\n            ? style.highlighted\n            : null;\n        return { className };\n      }}\n      getTheadProps={() => {\n        const style = model.count === 0 ? { height: 0 } : null;\n        return { style };\n      }}\n      pageSize={model.count}\n      className=\"-striped -highlight\"\n    />\n  );\n};\n\nexport default inject(STORE_LEFT_TABLE)(observer(LeftDataTable));\n","import React from 'react';\nimport * as style from './style.css';\n\ninterface Props {\n  isChecked: boolean;\n  onChange: (isChecked: boolean) => void;\n}\n\nconst Checkbox: React.FC<Props> = ({ isChecked, onChange }) => {\n  return (\n    <input\n      type=\"checkbox\"\n      checked={isChecked}\n      className={style.checkbox}\n      onChange={(event) => onChange(event.target.checked)}\n      />\n  )\n}\n\nexport default Checkbox;\n","import React from 'react';\nimport 'react-table/react-table.css';\nimport { observer, inject } from 'mobx-react';\nimport Checkbox from 'app/base-components/Checkbox';\nimport TruncatedTextWithHTML from 'app/base-components/TruncatedTextWithHTML';\nimport RightTableModel from 'app/models/RightTableModel';\nimport { STORE_RIGHT_TABLE } from 'app/constants/stores';\nimport DataTable from 'app/base-components/DataTable';\nimport IDataItem from 'app/IDataItem';\n\ninterface IProps {\n  [STORE_RIGHT_TABLE]?: RightTableModel;\n}\ninterface ICellProps extends IProps {\n  item: IDataItem;\n}\n\nconst CheckboxCell: React.FC<ICellProps> = inject(STORE_RIGHT_TABLE)(\n  observer((props) => {\n    const { STORE_RIGHT_TABLE: model, item } = props;\n    const isChecked = (id: number) => {\n      return model.checked.has(item);\n    };\n    return (\n      <Checkbox\n        isChecked={isChecked(item.id)}\n        onChange={(checked) => model.check(item.id, checked)}\n      />\n    );\n  })\n);\n\nconst DescriptionCell: React.FC<Partial<ICellProps>> = observer(({ item }) => {\n  return (\n    <div\n      style={{\n        whiteSpace: 'normal'\n      }}\n    >\n      <p>{'Арт.: ' + item.artNo}</p>\n      <p>\n        <TruncatedTextWithHTML value={item.name} max={100} />\n      </p>\n      <p>\n        <TruncatedTextWithHTML value={item.description} max={264} />\n      </p>\n    </div>\n  );\n});\n\nconst RightDataTable: React.FC<IProps> = (props) => {\n  const { STORE_RIGHT_TABLE: model } = props;\n  return (\n    <DataTable\n      showPagination={false}\n      showPageSizeOptions={false}\n      sortable={false}\n      data={model.items}\n      columns={[\n        {\n          Header: undefined,\n          id: 'checkboxColumn',\n          accessor: 'id',\n          Cell: ({ value: id }) => (\n            <CheckboxCell item={model.getItemById(id)} />\n          ),\n          width: 35,\n          style: {\n            alignSelf: 'center'\n          }\n        },\n        {\n          Header: undefined,\n          id: 'descriptionColumn',\n          accessor: 'id',\n          Cell: ({ value: id }) => (\n            <DescriptionCell item={model.getItemById(id)} />\n          )\n        }\n      ]}\n      pageSize={model.count}\n      className=\"-striped -highlight\"\n      getTheadProps={() => ({\n        style: {\n          height: 0\n        }\n      })}\n    />\n  );\n};\n\nexport default inject(STORE_RIGHT_TABLE)(observer(RightDataTable));\n","import * as React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { RouteComponentProps } from 'react-router';\nimport TablesStore from 'app/stores/TablesStore';\nimport { STORE_TABLES } from 'app/constants/stores';\nimport Button from 'app/base-components/Button';\nimport LeftDataTable from 'app/components/LeftDataTable';\nimport RightDataTable from 'app/components/RightDataTable';\n\nexport interface TablesAppProps extends RouteComponentProps<any> {\n  /** MobX Stores will be injected via @inject() **/\n  [STORE_TABLES]: TablesStore;\n}\n\n@inject(STORE_TABLES)\n@observer\nexport default class TablesApp extends React.Component<TablesAppProps> {\n  render() {\n    const tablesStore = this.props[STORE_TABLES];\n    const { left, right } = tablesStore;\n\n    return (\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateRows: '1fr 40px',\n          gridTemplateColumns: '1fr 1fr',\n          gridGap: '20px'\n        }}\n      >\n        <div>\n          <LeftDataTable />\n        </div>\n        <div>\n          <RightDataTable />\n        </div>\n        <div\n          style={{\n            display: 'inline-grid',\n            gridTemplateColumns: '1fr 1fr 1fr',\n            gridGap: '10px'\n          }}\n        >\n          <Button\n            disabled={left.isLastSelected || !left.isAnySelected}\n            onPress={left.selectNext}\n          >\n            &darr;\n          </Button>\n          <Button\n            disabled={left.isFirstSelected || !left.isAnySelected}\n            onPress={left.selectPrevious}\n          >\n            &uarr;\n          </Button>\n          <Button\n            disabled={!left.isAnySelected}\n            onPress={tablesStore.throwRight}\n          >\n            Добавить\n          </Button>\n        </div>\n        <div\n          style={{\n            display: 'inline-grid',\n            gridTemplateColumns: '1fr 1fr 1fr',\n            gridGap: '10px'\n          }}\n        >\n          <Button\n            disabled={right.checkedCount === right.count}\n            onPress={right.checkAll}\n          >\n            Выбрать все\n          </Button>\n          <Button\n            disabled={right.checkedCount === 0}\n            onPress={right.uncheckAll}\n          >\n            Сбросить выделение\n          </Button>\n          <Button\n            disabled={right.checkedCount === 0}\n            onPress={tablesStore.throwLeft}\n          >\n            Удалить\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport { Router, Route, Switch } from 'react-router';\nimport { Root } from 'app/containers/Root';\nimport TablesApp from './containers/TablesApp';\n\n\n// render react DOM\nexport const App = hot(({ history }) => (\n  <Root>\n    <Router history={history}>\n      <Switch>\n        <Route path=\"/\" component={TablesApp} />\n      </Switch>\n    </Router>\n  </Root>\n));\n","import { History } from 'history';\nimport {\n  RouterStore as BaseRouterStore,\n  syncHistoryWithStore\n} from 'mobx-react-router';\n\nexport class RouterStore extends BaseRouterStore {\n  constructor(history?: History) {\n    super();\n    if (history) {\n      this.history = syncHistoryWithStore(history, this);\n    }\n  }\n}\n\nexport default RouterStore;\n","import { observable, computed, ObservableMap, action } from 'mobx';\nimport IDataItem from 'app/IDataItem';\nimport _ from 'lodash';\n\nexport default abstract class AbstractTableModel {\n  constructor(items: IDataItem[]) {\n    this._items = observable.map(_.map(items, (item) => [item.id, item]));\n  }\n  @computed public get items() {\n    const itemsResult = Array.from(this._items.values());\n    return itemsResult;\n  }\n  @computed public get count() {\n    return this._items.size;\n  }\n  public getItemById(id: number) {\n    return this._items.get(id);\n  }\n  @action public add = (item: IDataItem) => {\n    this._items.set(item.id, item);\n  };\n  @action public delete = (id: number) => {\n    return this._items.delete(id);\n  };\n  private _items: ObservableMap<number, IDataItem>;\n}\n","import { observable, computed, action } from 'mobx';\nimport _ from 'lodash';\nimport AbstractTableModel from './AbstractTableModel';\n\nexport default class LeftTableModel extends AbstractTableModel {\n  @computed public get isFirstSelected() {\n    return this.count && this.selectedIndex === 0;\n  }\n  @computed public get isLastSelected() {\n    return this.selectedIndex + 1 === this.count;\n  }\n  @computed public get isAnySelected() {\n    return this.count > 0;\n  }\n  @computed public get selectedId() {\n    const { items } = this;\n    const selectedItem = items[this.selectedIndex];\n    return selectedItem && selectedItem.id;\n  }\n  @action public removeSelected = () => {\n    const { selected, isLastSelected } = this;\n    if (this.delete(selected.id)) {\n      if (isLastSelected) {\n        this.selectedIndex = 0;\n      }\n      return selected;\n    }\n    return null;\n  };\n  @action public selectNext = () => {\n    this.selectedIndex++;\n  };\n  @action public selectPrevious = () => {\n    this.selectedIndex--;\n  };\n\n  @observable private selectedIndex = 0;\n  @computed private get selected() {\n    return this.items[this.selectedIndex];\n  }\n}\n","import { observable, computed, action } from 'mobx';\nimport _ from 'lodash';\nimport IDataItem from '../IDataItem';\nimport AbstractTableModel from './AbstractTableModel';\n\nexport default class RightTableModel extends AbstractTableModel {\n  public checked = observable.set<IDataItem>();\n  @computed public get checkedCount() {\n    return this.checked.size;\n  }\n  @action public check = (id: number, value: boolean) => {\n    const item = this.getItemById(id);\n    if (value) {\n      this.checked.add(item);\n    } else {\n      this.checked.delete(item);\n    }\n  };\n  @action public removeChecked = () => {\n    const removedItems: IDataItem[] = [];\n    this.checked.forEach((checkedItem) => {\n      if (this.delete(checkedItem.id)) {\n        removedItems.push(checkedItem);\n      }\n    });\n    this.checked.clear();\n    return removedItems;\n  };\n  @action public checkAll = () => {\n    this.items.forEach((item) => this.checked.add(item));\n  };\n  @action public uncheckAll = () => {\n    this.checked.clear();\n  };\n}\n","import { observable, action } from 'mobx';\nimport LeftTableModel from 'app/models/LeftTableModel';\nimport RightTableModel from 'app/models/RightTableModel';\nimport _ from 'lodash';\n\nexport default class TablesStore {\n  constructor(left: LeftTableModel, right: RightTableModel) {\n    this.left = left;\n    this.right = right;\n  }\n  @observable public left: LeftTableModel;\n  @observable public right: RightTableModel;\n\n  @action throwRight = (): void => {\n    const item = this.left.removeSelected();\n    if (item) {\n      this.right.add(item); \n    }\n  }\n  @action throwLeft = (): void => {\n    const items = this.right.removeChecked();\n    _.forEach(items, this.left.add);\n  }\n}\n","import {\n  STORE_ROUTER,\n  STORE_RIGHT_TABLE,\n  STORE_LEFT_TABLE\n} from '../constants/stores';\nimport { History } from 'history';\nimport { RouterStore } from './RouterStore';\nimport TablesStore from './TablesStore';\nimport LeftTableModel from 'app/models/LeftTableModel';\nimport {\n  LEFT_TABLE_MOCK_DATA,\n  RIGHT_TABLE_MOCK_DATA\n} from 'app/stores/mock-data';\nimport RightTableModel from 'app/models/RightTableModel';\nimport { STORE_TABLES } from 'app/constants/stores';\n\nexport function createStores(history: History) {\n  const leftTableStore = new LeftTableModel(LEFT_TABLE_MOCK_DATA);\n  const rightTableStore = new RightTableModel(RIGHT_TABLE_MOCK_DATA);\n  const tablesStore = new TablesStore(leftTableStore, rightTableStore);\n  const routerStore = new RouterStore(history);\n  return {\n    [STORE_TABLES]: tablesStore,\n    [STORE_LEFT_TABLE]: leftTableStore,\n    [STORE_RIGHT_TABLE]: rightTableStore,\n    [STORE_ROUTER]: routerStore\n  };\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\nimport { createBrowserHistory } from 'history';\nimport { App } from 'app';\nimport { createStores } from 'app/stores/createStore';\n\n// prepare MobX stores\nconst history = createBrowserHistory();\nconst rootStore = createStores(history);\n\n// render react DOM\nReactDOM.render(\n  <Provider {...rootStore}>\n    <App history={history} />\n  </Provider>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"highlighted\":\"highlighted\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"checkbox\"};"],"sourceRoot":""}